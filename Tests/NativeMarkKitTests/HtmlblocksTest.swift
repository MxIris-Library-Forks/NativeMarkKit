// This file autogenerated by NativeMarkSpecImport
    
import Foundation
import XCTest
@testable import NativeMarkKit

final class HtmlblocksTest: XCTestCase {
    func testCase118() throws {
        // HTML: <table><tr><td>\n<pre>\n**Hello**,\n<p><em>world</em>.\n</pre></p>\n</td></tr></table>\n
        // Debug: <table><tbody><tr><td>\n<pre>\n**Hello**,\n<p><em>world</em>.\n</p></pre><p></p>\n</td></tr></tbody></table>\n
        XCTAssertEqual(try compile("<table><tr><td>\n<pre>\n**Hello**,\n\n_world_.\n</pre>\n</td></tr></table>\n"),
                       Document(elements: [.paragraph([.emphasis([.text("world")]), .text(".")]), .paragraph([])]))
    }

    func testCase119() throws {
        // HTML: <table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n<p>okay.</p>\n
        // Debug: <table>\n  <tbody><tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</tbody></table>\n<p>okay.</p>\n
        XCTAssertEqual(try compile("<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n\nokay.\n"),
                       Document(elements: [.paragraph([.text("okay.")])]))
    }

    func testCase120() throws {
        // HTML:  <div>\n  *hello*\n         <foo><a>\n
        // Debug:  <div>\n  *hello*\n         <foo><a>\n</a></foo></div>
        XCTAssertEqual(try compile(" <div>\n  *hello*\n         <foo><a>\n"),
                       Document(elements: [.paragraph([.link(Link(title: "", url: ""), text: [])])]))
    }

    func testCase121() throws {
        // HTML: </div>\n*foo*\n
        // Debug: \n*foo*\n
        XCTAssertEqual(try compile("</div>\n*foo*\n"),
                       Document(elements: []))
    }

    func testCase122() throws {
        // HTML: <DIV CLASS=\"foo\">\n<p><em>Markdown</em></p>\n</DIV>\n
        // Debug: <div>\n<p><em>Markdown</em></p>\n</div>\n
        XCTAssertEqual(try compile("<DIV CLASS=\"foo\">\n\n*Markdown*\n\n</DIV>\n"),
                       Document(elements: [.paragraph([.emphasis([.text("Markdown")])])]))
    }

    func testCase123() throws {
        // HTML: <div id=\"foo\"\n  class=\"bar\">\n</div>\n
        // Debug: <div>\n</div>\n
        XCTAssertEqual(try compile("<div id=\"foo\"\n  class=\"bar\">\n</div>\n"),
                       Document(elements: []))
    }

    func testCase124() throws {
        // HTML: <div id=\"foo\" class=\"bar\n  baz\">\n</div>\n
        // Debug: <div>\n</div>\n
        XCTAssertEqual(try compile("<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n"),
                       Document(elements: []))
    }

    func testCase125() throws {
        // HTML: <div>\n*foo*\n<p><em>bar</em></p>\n
        // Debug: <div>\n*foo*\n<p><em>bar</em></p>\n</div>
        XCTAssertEqual(try compile("<div>\n*foo*\n\n*bar*\n"),
                       Document(elements: [.paragraph([.emphasis([.text("bar")])])]))
    }

    func testCase126() throws {
        // HTML: <div id=\"foo\"\n*hi*\n
        // Debug: <div></div>
        XCTAssertEqual(try compile("<div id=\"foo\"\n*hi*\n"),
                       Document(elements: []))
    }

    func testCase127() throws {
        // HTML: <div class\nfoo\n
        // Debug: <div></div>
        XCTAssertEqual(try compile("<div class\nfoo\n"),
                       Document(elements: []))
    }

    func testCase128() throws {
        // HTML: <div *???-&&&-<---\n*foo*\n
        // Debug: <div></div>
        XCTAssertEqual(try compile("<div *???-&&&-<---\n*foo*\n"),
                       Document(elements: []))
    }

    func testCase129() throws {
        // HTML: <div><a href=\"bar\">*foo*</a></div>\n
        // Debug: <div><a>*foo*</a></div>\n
        XCTAssertEqual(try compile("<div><a href=\"bar\">*foo*</a></div>\n"),
                       Document(elements: [.paragraph([.link(Link(title: "", url: "bar"), text: [.text("*foo*")])])]))
    }

    func testCase130() throws {
        // HTML: <table><tr><td>\nfoo\n</td></tr></table>\n
        // Debug: <table><tbody><tr><td>\nfoo\n</td></tr></tbody></table>\n
        XCTAssertEqual(try compile("<table><tr><td>\nfoo\n</td></tr></table>\n"),
                       Document(elements: []))
    }

    func testCase131() throws {
        // HTML: <div></div>\n``` c\nint x = 33;\n```\n
        // Debug: <div></div>\n``` c\nint x = 33;\n```\n
        XCTAssertEqual(try compile("<div></div>\n``` c\nint x = 33;\n```\n"),
                       Document(elements: []))
    }

    func testCase132() throws {
        // HTML: <a href=\"foo\">\n*bar*\n</a>\n
        // Debug: <a>\n*bar*\n</a>\n
        XCTAssertEqual(try compile("<a href=\"foo\">\n*bar*\n</a>\n"),
                       Document(elements: [.paragraph([.link(Link(title: "", url: "foo"), text: [.text("*bar*")])])]))
    }

    func testCase133() throws {
        // HTML: <Warning>\n*bar*\n</Warning>\n
        // Debug: <warning>\n*bar*\n</warning>\n
        XCTAssertEqual(try compile("<Warning>\n*bar*\n</Warning>\n"),
                       Document(elements: []))
    }

    func testCase134() throws {
        // HTML: <i class=\"foo\">\n*bar*\n</i>\n
        // Debug: <i>\n*bar*\n</i>\n
        XCTAssertEqual(try compile("<i class=\"foo\">\n*bar*\n</i>\n"),
                       Document(elements: []))
    }

    func testCase135() throws {
        // HTML: </ins>\n*bar*\n
        // Debug: \n*bar*\n
        XCTAssertEqual(try compile("</ins>\n*bar*\n"),
                       Document(elements: []))
    }

    func testCase136() throws {
        // HTML: <del>\n*foo*\n</del>\n
        // Debug: <del>\n*foo*\n</del>\n
        XCTAssertEqual(try compile("<del>\n*foo*\n</del>\n"),
                       Document(elements: []))
    }

    func testCase137() throws {
        // HTML: <del>\n<p><em>foo</em></p>\n</del>\n
        // Debug: <del>\n<p><em>foo</em></p>\n</del>\n
        XCTAssertEqual(try compile("<del>\n\n*foo*\n\n</del>\n"),
                       Document(elements: [.paragraph([.emphasis([.text("foo")])])]))
    }

    func testCase138() throws {
        // HTML: <p><del><em>foo</em></del></p>\n
        // Debug: <p><del><em>foo</em></del></p>\n
        XCTAssertEqual(try compile("<del>*foo*</del>\n"),
                       Document(elements: [.paragraph([.text("<del>"), .emphasis([.text("foo")]), .text("</del>")])]))
    }

    func testCase139() throws {
        // HTML: <pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n<p>okay</p>\n
        // Debug: <pre><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n<p>okay</p>\n
        XCTAssertEqual(try compile("<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\nokay\n"),
                       Document(elements: [.codeBlock(infoString: "", content: "\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n"), .paragraph([.text("okay")])]))
    }

    func testCase140() throws {
        // HTML: <script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n<p>okay</p>\n
        // Debug: <script>\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n<p>okay</p>\n
        XCTAssertEqual(try compile("<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\nokay\n"),
                       Document(elements: [.paragraph([.text("okay")])]))
    }

    func testCase141() throws {
        // HTML: <style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\n<p>okay</p>\n
        // Debug: <style>\nh1 {color:red;}\n\np {color:blue;}\n</style>\n<p>okay</p>\n
        XCTAssertEqual(try compile("<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\nokay\n"),
                       Document(elements: [.paragraph([.text("okay")])]))
    }

    func testCase142() throws {
        // HTML: <style\n  type=\"text/css\">\n\nfoo\n
        // Debug: <style>\n\nfoo\n</body></style>
        XCTAssertEqual(try compile("<style\n  type=\"text/css\">\n\nfoo\n"),
                       Document(elements: []))
    }

    func testCase143() throws {
        // HTML: <blockquote>\n<div>\nfoo\n</blockquote>\n<p>bar</p>\n
        // Debug: <blockquote>\n<div>\nfoo\n</div></blockquote>\n<p>bar</p>\n
        XCTAssertEqual(try compile("> <div>\n> foo\n\nbar\n"),
                       Document(elements: [.blockQuote([]), .paragraph([.text("bar")])]))
    }

    func testCase144() throws {
        // HTML: <ul>\n<li>\n<div>\n</li>\n<li>foo</li>\n</ul>\n
        // Debug: <ul>\n<li>\n<div>\n</div></li>\n<li>foo</li>\n</ul>\n
        XCTAssertEqual(try compile("- <div>\n- foo\n"),
                       Document(elements: [.list(ListInfo(isTight: true, kind: .bulleted), items: [ListItem(elements: []), ListItem(elements: [])])]))
    }

    func testCase145() throws {
        // HTML: <style>p{color:red;}</style>\n<p><em>foo</em></p>\n
        // Debug: <style>p{color:red;}</style>\n<p><em>foo</em></p>\n
        XCTAssertEqual(try compile("<style>p{color:red;}</style>\n*foo*\n"),
                       Document(elements: [.paragraph([.emphasis([.text("foo")])])]))
    }

    func testCase146() throws {
        // HTML: <!-- foo -->*bar*\n<p><em>baz</em></p>\n
        // Debug: \n<!-- foo -->*bar*\n<p><em>baz</em></p>\n
        XCTAssertEqual(try compile("<!-- foo -->*bar*\n*baz*\n"),
                       Document(elements: [.paragraph([.emphasis([.text("baz")])])]))
    }

    func testCase147() throws {
        // HTML: <script>\nfoo\n</script>1. *bar*\n
        // Debug: <script>\nfoo\n</script>1. *bar*\n
        XCTAssertEqual(try compile("<script>\nfoo\n</script>1. *bar*\n"),
                       Document(elements: []))
    }

    func testCase148() throws {
        // HTML: <!-- Foo\n\nbar\n   baz -->\n<p>okay</p>\n
        // Debug: \n<!-- Foo\n\nbar\n   baz -->\n<p>okay</p>\n
        XCTAssertEqual(try compile("<!-- Foo\n\nbar\n   baz -->\nokay\n"),
                       Document(elements: [.paragraph([.text("okay")])]))
    }

    func testCase149() throws {
        // HTML: <?php\n\n  echo '>';\n\n?>\n<p>okay</p>\n
        // Debug: \n<!--?php\n\n  echo '-->';\n\n?>\n<p>okay</p>\n
        XCTAssertEqual(try compile("<?php\n\n  echo '>';\n\n?>\nokay\n"),
                       Document(elements: [.paragraph([.text("okay")])]))
    }

    func testCase150() throws {
        // HTML: <!DOCTYPE html>\n
        // Debug: \n
        XCTAssertEqual(try compile("<!DOCTYPE html>\n"),
                       Document(elements: []))
    }

    func testCase151() throws {
        // HTML: <![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n<p>okay</p>\n
        // Debug: \nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n\n<p>okay</p>\n
        XCTAssertEqual(try compile("<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\nokay\n"),
                       Document(elements: [.paragraph([.text("okay")])]))
    }

    func testCase152() throws {
        // HTML:   <!-- foo -->\n<pre><code>&lt;!-- foo --&gt;\n</code></pre>\n
        // Debug:   \n<!-- foo -->\n<pre><code><!-- foo -->\n</code></pre>\n
        XCTAssertEqual(try compile("  <!-- foo -->\n\n    <!-- foo -->\n"),
                       Document(elements: [.codeBlock(infoString: "", content: "<!-- foo -->\n")]))
    }

    func testCase153() throws {
        // HTML:   <div>\n<pre><code>&lt;div&gt;\n</code></pre>\n
        // Debug:   <div>\n<pre><code><div>\n</code></pre>\n</div>
        XCTAssertEqual(try compile("  <div>\n\n    <div>\n"),
                       Document(elements: [.codeBlock(infoString: "", content: "<div>\n")]))
    }

    func testCase154() throws {
        // HTML: <p>Foo</p>\n<div>\nbar\n</div>\n
        // Debug: <p>Foo</p>\n<div>\nbar\n</div>\n
        XCTAssertEqual(try compile("Foo\n<div>\nbar\n</div>\n"),
                       Document(elements: [.paragraph([.text("Foo")])]))
    }

    func testCase155() throws {
        // HTML: <div>\nbar\n</div>\n*foo*\n
        // Debug: <div>\nbar\n</div>\n*foo*\n
        XCTAssertEqual(try compile("<div>\nbar\n</div>\n*foo*\n"),
                       Document(elements: []))
    }

    func testCase156() throws {
        // HTML: <p>Foo\n<a href=\"bar\">\nbaz</p>\n
        // Debug: <p>Foo\n<a>\nbaz</a></p><a>\n</a>
        XCTAssertEqual(try compile("Foo\n<a href=\"bar\">\nbaz\n"),
                       Document(elements: [.paragraph([.text("Foo"), .link(Link(title: "", url: "bar"), text: [.text("baz")])]), .paragraph([.link(Link(title: "", url: "bar"), text: [])])]))
    }

    func testCase157() throws {
        // HTML: <div>\n<p><em>Emphasized</em> text.</p>\n</div>\n
        // Debug: <div>\n<p><em>Emphasized</em> text.</p>\n</div>\n
        XCTAssertEqual(try compile("<div>\n\n*Emphasized* text.\n\n</div>\n"),
                       Document(elements: [.paragraph([.emphasis([.text("Emphasized")]), .text(" text.")])]))
    }

    func testCase158() throws {
        // HTML: <div>\n*Emphasized* text.\n</div>\n
        // Debug: <div>\n*Emphasized* text.\n</div>\n
        XCTAssertEqual(try compile("<div>\n*Emphasized* text.\n</div>\n"),
                       Document(elements: []))
    }

    func testCase159() throws {
        // HTML: <table>\n<tr>\n<td>\nHi\n</td>\n</tr>\n</table>\n
        // Debug: <table>\n<tbody><tr>\n<td>\nHi\n</td>\n</tr>\n</tbody></table>\n
        XCTAssertEqual(try compile("<table>\n\n<tr>\n\n<td>\nHi\n</td>\n\n</tr>\n\n</table>\n"),
                       Document(elements: []))
    }

    func testCase160() throws {
        // HTML: <table>\n  <tr>\n<pre><code>&lt;td&gt;\n  Hi\n&lt;/td&gt;\n</code></pre>\n  </tr>\n</table>\n
        // Debug: <pre><code><td>\n  Hi\n</td>\n</code></pre><table>\n  <tbody><tr>\n\n  </tr>\n</tbody></table>\n
        XCTAssertEqual(try compile("<table>\n\n  <tr>\n\n    <td>\n      Hi\n    </td>\n\n  </tr>\n\n</table>\n"),
                       Document(elements: [.codeBlock(infoString: "", content: "<td>\n  Hi\n</td>\n")]))
    }

    
}